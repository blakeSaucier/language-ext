using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using CodeGeneration.Roslyn;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace LanguageExt.CodeGen
{
    /// <summary>
    /// Reader Generator
    /// </summary>
    public class ReaderGenerator : ICodeGenerator
    {
        readonly string envType;

        /// <summary>
        /// Provides a With function for record types
        /// </summary>
        public ReaderGenerator(AttributeData attributeData) =>
            envType = attributeData.ConstructorArguments[0].Value.ToString();

        public Task<SyntaxList<MemberDeclarationSyntax>> GenerateAsync(
            TransformationContext context, 
            IProgress<Diagnostic> progress, 
            CancellationToken cancellationToken)
        {
            var results = SyntaxFactory.List<MemberDeclarationSyntax>();

            if (context.ProcessingNode is StructDeclarationSyntax applyToStruct)
            {
                // Apply a suffix to the name of a copy of the struct.
                var partialStruct = SyntaxFactory.StructDeclaration($"{applyToStruct.Identifier}")
                                                 .WithModifiers(applyToStruct.Modifiers)
                                                 .WithTypeParameterList(applyToStruct.TypeParameterList);

                TypeSyntax MakeGenericStruct(StructDeclarationSyntax s, string gen)
                {
                    var gens = applyToStruct.TypeParameterList.Parameters.RemoveAt(applyToStruct.TypeParameterList.Parameters.Count - 1).Add(TypeParameter(gen));
                    return SyntaxFactory.ParseTypeName($"{applyToStruct.Identifier}<{gens}>");
                }

                var structName = applyToStruct.Identifier;
                var genA = applyToStruct.TypeParameterList.Parameters.Last().ToString();
                var genB = $"{genA.Substring(0, genA.Length - 1)}{(char)((genA[genA.Length - 1] + 1))}";
                var genC = $"{genA.Substring(0, genA.Length - 1)}{(char)((genA[genA.Length - 1] + 2))}";
                var structA = SyntaxFactory.ParseTypeName($"{applyToStruct.Identifier}<{applyToStruct.TypeParameterList.Parameters}>");
                var structB = MakeGenericStruct(applyToStruct, genB);
                var structC = MakeGenericStruct(applyToStruct, genC);
                var structEnv = MakeGenericStruct(applyToStruct, envType);
                var structUnit = MakeGenericStruct(applyToStruct, "LanguageExt.Unit");

                var compType = SyntaxFactory.ParseTypeName($"LanguageExt.Reader<{envType}, {applyToStruct.TypeParameterList.Parameters.Last()}>");

                partialStruct = partialStruct.WithMembers(
                    List<MemberDeclarationSyntax>(
                        new MemberDeclarationSyntax[]{
                            FieldDeclaration(
                                VariableDeclaration(compType)
                                .WithVariables(
                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        VariableDeclarator(
                                            Identifier("__comp")))))
                            .WithModifiers(TokenList(new []{Token(SyntaxKind.ReadOnlyKeyword)})),
                            ConstructorDeclaration(structName)
                            .WithModifiers(TokenList(new []{Token(SyntaxKind.InternalKeyword)}))
                            .WithParameterList(
                                ParameterList(
                                    SingletonSeparatedList<ParameterSyntax>(
                                        Parameter(Identifier("comp"))
                                        .WithType(compType))))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    AssignmentExpression(
                                        SyntaxKind.SimpleAssignmentExpression,
                                        IdentifierName("__comp"),
                                        IdentifierName("comp"))))
                            .WithSemicolonToken(
                                Token(SyntaxKind.SemicolonToken)),
                            MethodDeclaration(
                                structA,
                                Identifier("Return"))
                            .WithModifiers(
                                TokenList(
                                    new []{
                                        Token(SyntaxKind.PublicKeyword),
                                        Token(SyntaxKind.StaticKeyword)}))
                            .WithParameterList(
                                ParameterList(
                                    SingletonSeparatedList<ParameterSyntax>(
                                        Parameter(
                                            Identifier("value"))
                                        .WithType(
                                            IdentifierName(genA)))))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    ObjectCreationExpression(structA)
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    SimpleLambdaExpression(
                                                        Parameter(
                                                            Identifier("env")),
                                                        TupleExpression(
                                                            SeparatedList<ArgumentSyntax>(
                                                                new SyntaxNodeOrToken[]{
                                                                    Argument(
                                                                        IdentifierName("value")),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    Argument(
                                                                        LiteralExpression(
                                                                            SyntaxKind.FalseLiteralExpression))})))))))))
                            .WithSemicolonToken(
                                Token(SyntaxKind.SemicolonToken)),
                            PropertyDeclaration(structA, Identifier("Fail"))
                            .WithModifiers(
                                TokenList(
                                    new []{
                                        Token(SyntaxKind.PublicKeyword),
                                        Token(SyntaxKind.StaticKeyword)}))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    ObjectCreationExpression(structA)
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    SimpleLambdaExpression(
                                                        Parameter(
                                                            Identifier("env")),
                                                        TupleExpression(
                                                            SeparatedList<ArgumentSyntax>(
                                                                new SyntaxNodeOrToken[]{
                                                                    Argument(
                                                                        LiteralExpression(
                                                                            SyntaxKind.DefaultLiteralExpression,
                                                                            Token(SyntaxKind.DefaultKeyword))),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    Argument(
                                                                        LiteralExpression(
                                                                            SyntaxKind.TrueLiteralExpression))})))))))))
                            .WithSemicolonToken(
                                Token(SyntaxKind.SemicolonToken)),
                            MethodDeclaration(structB, Identifier("Map"))
                            .WithModifiers(
                                TokenList(
                                    Token(SyntaxKind.PublicKeyword)))
                            .WithTypeParameterList(
                                TypeParameterList(
                                    SingletonSeparatedList<TypeParameterSyntax>(
                                        TypeParameter(
                                            Identifier(genB)))))
                            .WithParameterList(
                                ParameterList(
                                    SingletonSeparatedList<ParameterSyntax>(
                                        Parameter(
                                            Identifier("f"))
                                        .WithType(
                                            GenericName(
                                                Identifier("Func"))
                                            .WithTypeArgumentList(
                                                TypeArgumentList(
                                                    SeparatedList<TypeSyntax>(
                                                        new SyntaxNodeOrToken[]{
                                                            IdentifierName(genA),
                                                            Token(SyntaxKind.CommaToken),
                                                            IdentifierName(genB)})))))))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    ObjectCreationExpression(structB)
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("__comp"),
                                                            IdentifierName("Map")))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SingletonSeparatedList<ArgumentSyntax>(
                                                                Argument(
                                                                    IdentifierName("f")))))))))))
                            .WithSemicolonToken(
                                Token(SyntaxKind.SemicolonToken)),
                            MethodDeclaration(structB, Identifier("Select"))
                            .WithModifiers(
                                TokenList(
                                    Token(SyntaxKind.PublicKeyword)))
                            .WithTypeParameterList(
                                TypeParameterList(
                                    SingletonSeparatedList<TypeParameterSyntax>(
                                        TypeParameter(
                                            Identifier(genB)))))
                            .WithParameterList(
                                ParameterList(
                                    SingletonSeparatedList<ParameterSyntax>(
                                        Parameter(
                                            Identifier("f"))
                                        .WithType(
                                            GenericName(
                                                Identifier("Func"))
                                            .WithTypeArgumentList(
                                                TypeArgumentList(
                                                    SeparatedList<TypeSyntax>(
                                                        new SyntaxNodeOrToken[]{
                                                            IdentifierName(genA),
                                                            Token(SyntaxKind.CommaToken),
                                                            IdentifierName(genB)})))))))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    ObjectCreationExpression(structB)
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("__comp"),
                                                            IdentifierName("Map")))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SingletonSeparatedList<ArgumentSyntax>(
                                                                Argument(
                                                                    IdentifierName("f")))))))))))
                            .WithSemicolonToken(
                                Token(SyntaxKind.SemicolonToken)),
                            MethodDeclaration(structB, Identifier("SelectMany"))
                            .WithModifiers(
                                TokenList(
                                    Token(SyntaxKind.PublicKeyword)))
                            .WithTypeParameterList(
                                TypeParameterList(
                                    SingletonSeparatedList<TypeParameterSyntax>(
                                        TypeParameter(
                                            Identifier(genB)))))
                            .WithParameterList(
                                ParameterList(
                                    SingletonSeparatedList<ParameterSyntax>(
                                        Parameter(
                                            Identifier("f"))
                                        .WithType(
                                            GenericName(
                                                Identifier("Func"))
                                            .WithTypeArgumentList(
                                                TypeArgumentList(
                                                    SeparatedList<TypeSyntax>(
                                                        new SyntaxNodeOrToken[]{
                                                            IdentifierName(genA),
                                                            Token(SyntaxKind.CommaToken),
                                                            structB })))))))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    ObjectCreationExpression(structB)
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("__comp"),
                                                            IdentifierName("Bind")))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SingletonSeparatedList<ArgumentSyntax>(
                                                                Argument(
                                                                    SimpleLambdaExpression(
                                                                        Parameter(
                                                                            Identifier("a")),
                                                                        MemberAccessExpression(
                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                            InvocationExpression(
                                                                                IdentifierName("f"))
                                                                            .WithArgumentList(
                                                                                ArgumentList(
                                                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                                                        Argument(
                                                                                            IdentifierName("a"))))),
                                                                            IdentifierName("__comp")))))))))))))
                            .WithSemicolonToken(
                                Token(SyntaxKind.SemicolonToken)),
                            MethodDeclaration(structC, Identifier("SelectMany"))
                            .WithModifiers(
                                TokenList(
                                    Token(SyntaxKind.PublicKeyword)))
                            .WithTypeParameterList(
                                TypeParameterList(
                                    SeparatedList<TypeParameterSyntax>(
                                        new SyntaxNodeOrToken[]{
                                            TypeParameter(
                                                Identifier(genB)),
                                            Token(SyntaxKind.CommaToken),
                                            TypeParameter(
                                                Identifier(genC))})))
                            .WithParameterList(
                                ParameterList(
                                    SeparatedList<ParameterSyntax>(
                                        new SyntaxNodeOrToken[]{
                                            Parameter(
                                                Identifier("bind"))
                                            .WithType(
                                                GenericName(
                                                    Identifier("Func"))
                                                .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SeparatedList<TypeSyntax>(
                                                            new SyntaxNodeOrToken[]{
                                                                IdentifierName(genA),
                                                                Token(SyntaxKind.CommaToken),
                                                                structB})))),
                                            Token(SyntaxKind.CommaToken),
                                            Parameter(
                                                Identifier("project"))
                                            .WithType(
                                                GenericName(
                                                    Identifier("Func"))
                                                .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SeparatedList<TypeSyntax>(
                                                            new SyntaxNodeOrToken[]{
                                                                IdentifierName(genA),
                                                                Token(SyntaxKind.CommaToken),
                                                                IdentifierName(genB),
                                                                Token(SyntaxKind.CommaToken),
                                                                IdentifierName(genC)}))))})))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    ObjectCreationExpression(structC)
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("__comp"),
                                                            IdentifierName("Bind")))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SingletonSeparatedList<ArgumentSyntax>(
                                                                Argument(
                                                                    SimpleLambdaExpression(
                                                                        Parameter(
                                                                            Identifier("a")),
                                                                        InvocationExpression(
                                                                            MemberAccessExpression(
                                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                                MemberAccessExpression(
                                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                                    InvocationExpression(
                                                                                        IdentifierName("bind"))
                                                                                    .WithArgumentList(
                                                                                        ArgumentList(
                                                                                            SingletonSeparatedList<ArgumentSyntax>(
                                                                                                Argument(
                                                                                                    IdentifierName("a"))))),
                                                                                    IdentifierName("__comp")),
                                                                                IdentifierName("Map")))
                                                                        .WithArgumentList(
                                                                            ArgumentList(
                                                                                SingletonSeparatedList<ArgumentSyntax>(
                                                                                    Argument(
                                                                                        SimpleLambdaExpression(
                                                                                            Parameter(
                                                                                                Identifier("b")),
                                                                                            InvocationExpression(
                                                                                                IdentifierName("project"))
                                                                                            .WithArgumentList(
                                                                                                ArgumentList(
                                                                                                    SeparatedList<ArgumentSyntax>(
                                                                                                        new SyntaxNodeOrToken[]{
                                                                                                            Argument(
                                                                                                                IdentifierName("a")),
                                                                                                            Token(SyntaxKind.CommaToken),
                                                                                                            Argument(
                                                                                                                IdentifierName("b"))})))))))))))))))))))
                            .WithSemicolonToken(
                                Token(SyntaxKind.SemicolonToken)),
                            PropertyDeclaration(structEnv, Identifier("Ask"))
                            .WithModifiers(
                                TokenList(
                                    Token(SyntaxKind.PublicKeyword)))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    ObjectCreationExpression(structEnv)
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            MemberAccessExpression(
                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                IdentifierName("LanguageExt"),
                                                                IdentifierName("Prelude")),
                                                            GenericName(
                                                                Identifier("ask"))
                                                            .WithTypeArgumentList(
                                                                TypeArgumentList(
                                                                    SingletonSeparatedList<TypeSyntax>(
                                                                        IdentifierName(envType))))))))))))
                            .WithSemicolonToken(
                                Token(SyntaxKind.SemicolonToken)),
                            MethodDeclaration(
                    GenericName(
                        Identifier("TryOption"))
                    .WithTypeArgumentList(
                            TypeArgumentList(
                                SingletonSeparatedList<TypeSyntax>(
                                    IdentifierName(genA)))),
                            Identifier("Run"))
                        .WithModifiers(
                            TokenList(
                                Token(SyntaxKind.PublicKeyword)))
                        .WithParameterList(
                            ParameterList(
                                SingletonSeparatedList<ParameterSyntax>(
                                    Parameter(
                                        Identifier("env"))
                                    .WithType(
                                        IdentifierName(envType)))))
                        .WithExpressionBody(
                            ArrowExpressionClause(
                                InvocationExpression(
                                    MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("__comp"),
                                        IdentifierName("Run")))
                                .WithArgumentList(
                                    ArgumentList(
                                        SingletonSeparatedList<ArgumentSyntax>(
                                            Argument(
                                                IdentifierName("env")))))))
                        .WithSemicolonToken(
                            Token(SyntaxKind.SemicolonToken)),
                    MethodDeclaration(
                        structA,
                        Identifier("Where"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList(
                        ParameterList(
                            SingletonSeparatedList<ParameterSyntax>(
                                Parameter(
                                    Identifier("f"))
                                .WithType(
                                    GenericName(
                                        Identifier("Func"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SeparatedList<TypeSyntax>(
                                                new SyntaxNodeOrToken[]{
                                                    IdentifierName(genA),
                                                    Token(SyntaxKind.CommaToken),
                                                    PredefinedType(
                                                        Token(SyntaxKind.BoolKeyword))})))))))
                    .WithExpressionBody(
                        ArrowExpressionClause(
                            ObjectCreationExpression(structA)
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList<ArgumentSyntax>(
                                        Argument(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("__comp"),
                                                    IdentifierName("Where")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("f")))))))))))
                    .WithSemicolonToken(
                        Token(SyntaxKind.SemicolonToken)),
                    MethodDeclaration(
                        structA,
                        Identifier("Filter"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList(
                        ParameterList(
                            SingletonSeparatedList<ParameterSyntax>(
                                Parameter(
                                    Identifier("f"))
                                .WithType(
                                    GenericName(
                                        Identifier("Func"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SeparatedList<TypeSyntax>(
                                                new SyntaxNodeOrToken[]{
                                                    IdentifierName(genA),
                                                    Token(SyntaxKind.CommaToken),
                                                    PredefinedType(
                                                        Token(SyntaxKind.BoolKeyword))})))))))
                    .WithExpressionBody(
                        ArrowExpressionClause(
                            ObjectCreationExpression(structA)
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList<ArgumentSyntax>(
                                        Argument(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("__comp"),
                                                    IdentifierName("Filter")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("f")))))))))))
                    .WithSemicolonToken(
                        Token(SyntaxKind.SemicolonToken)),
                    MethodDeclaration(
                        structA,
                        Identifier("Do"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList(
                        ParameterList(
                            SingletonSeparatedList<ParameterSyntax>(
                                Parameter(
                                    Identifier("f"))
                                .WithType(
                                    GenericName(
                                        Identifier("Action"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SingletonSeparatedList<TypeSyntax>(
                                                IdentifierName(genA))))))))
                    .WithExpressionBody(
                        ArrowExpressionClause(
                            ObjectCreationExpression(structA)
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList<ArgumentSyntax>(
                                        Argument(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("__comp"),
                                                    IdentifierName("Do")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("f")))))))))))
                    .WithSemicolonToken(
                        Token(SyntaxKind.SemicolonToken)),
                    MethodDeclaration(
                        structA,
                        Identifier("Strict"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithExpressionBody(
                        ArrowExpressionClause(
                            ObjectCreationExpression(structA)
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList<ArgumentSyntax>(
                                        Argument(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("__comp"),
                                                    IdentifierName("Strict")))))))))
                    .WithSemicolonToken(
                        Token(SyntaxKind.SemicolonToken)),
                    MethodDeclaration(
                        GenericName(
                            Identifier("Seq"))
                        .WithTypeArgumentList(
                            TypeArgumentList(
                                SingletonSeparatedList<TypeSyntax>(
                                    IdentifierName(genA)))),
                        Identifier("ToSeq"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList(
                        ParameterList(
                            SingletonSeparatedList<ParameterSyntax>(
                                Parameter(
                                    Identifier("env"))
                                .WithType(
                                    IdentifierName(envType)))))
                    .WithExpressionBody(
                        ArrowExpressionClause(
                            InvocationExpression(
                                MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("__comp"),
                                    IdentifierName("ToSeq")))
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList<ArgumentSyntax>(
                                        Argument(
                                            IdentifierName("env")))))))
                    .WithSemicolonToken(
                        Token(SyntaxKind.SemicolonToken)),
                    MethodDeclaration(
                        structUnit,
                        Identifier("Iter"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList(
                        ParameterList(
                            SingletonSeparatedList<ParameterSyntax>(
                                Parameter(
                                    Identifier("f"))
                                .WithType(
                                    GenericName(
                                        Identifier("Action"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SingletonSeparatedList<TypeSyntax>(
                                                IdentifierName(genA))))))))
                    .WithExpressionBody(
                        ArrowExpressionClause(
                            ObjectCreationExpression(structUnit)
                            .WithArgumentList(
                                ArgumentList(
                                    SingletonSeparatedList<ArgumentSyntax>(
                                        Argument(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("__comp"),
                                                    IdentifierName("Iter")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("f")))))))))))
                    .WithSemicolonToken(
                        Token(SyntaxKind.SemicolonToken)),
                    MethodDeclaration(
                        GenericName(
                            Identifier("Func"))
                        .WithTypeArgumentList(
                            TypeArgumentList(
                                SeparatedList<TypeSyntax>(
                                    new SyntaxNodeOrToken[]{
                                        IdentifierName(envType),
                                        Token(SyntaxKind.CommaToken),
                                        IdentifierName("S")}))),
                        Identifier("Fold"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithTypeParameterList(
                        TypeParameterList(
                            SingletonSeparatedList<TypeParameterSyntax>(
                                TypeParameter(
                                    Identifier("S")))))
                    .WithParameterList(
                        ParameterList(
                            SeparatedList<ParameterSyntax>(
                                new SyntaxNodeOrToken[]{
                                    Parameter(
                                        Identifier("state"))
                                    .WithType(
                                        IdentifierName("S")),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter(
                                        Identifier("f"))
                                    .WithType(
                                        GenericName(
                                            Identifier("Func"))
                                        .WithTypeArgumentList(
                                            TypeArgumentList(
                                                SeparatedList<TypeSyntax>(
                                                    new SyntaxNodeOrToken[]{
                                                        IdentifierName("S"),
                                                        Token(SyntaxKind.CommaToken),
                                                        IdentifierName(genA),
                                                        Token(SyntaxKind.CommaToken),
                                                        IdentifierName("S")}))))})))
                    .WithBody(
                        Block(
                            LocalDeclarationStatement(
                                VariableDeclaration(
                                    IdentifierName("var"))
                                .WithVariables(
                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        VariableDeclarator(
                                            Identifier("self"))
                                        .WithInitializer(
                                            EqualsValueClause(
                                                ThisExpression()))))),
                            ReturnStatement(
                                SimpleLambdaExpression(
                                    Parameter(
                                        Identifier("env")),
                                    InvocationExpression(
                                        MemberAccessExpression(
                                            SyntaxKind.SimpleMemberAccessExpression,
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            MemberAccessExpression(
                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                IdentifierName("self"),
                                                                IdentifierName("__comp")),
                                                            IdentifierName("Fold")))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SeparatedList<ArgumentSyntax>(
                                                                new SyntaxNodeOrToken[]{
                                                                    Argument(
                                                                        IdentifierName("state")),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    Argument(
                                                                        IdentifierName("f"))}))),
                                                    IdentifierName("Run")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("env"))))),
                                            IdentifierName("IfNoneOrFail")))
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    IdentifierName("state"))))))))),
                    MethodDeclaration(
                        GenericName(
                            Identifier("Func"))
                        .WithTypeArgumentList(
                            TypeArgumentList(
                                SeparatedList<TypeSyntax>(
                                    new SyntaxNodeOrToken[]{
                                        IdentifierName(envType),
                                        Token(SyntaxKind.CommaToken),
                                        PredefinedType(
                                            Token(SyntaxKind.BoolKeyword))}))),
                        Identifier("ForAll"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithTypeParameterList(
                        TypeParameterList(
                            SingletonSeparatedList<TypeParameterSyntax>(
                                TypeParameter(
                                    Identifier("S")))))
                    .WithParameterList(
                        ParameterList(
                            SeparatedList<ParameterSyntax>(
                                new SyntaxNodeOrToken[]{
                                    Parameter(
                                        Identifier("state"))
                                    .WithType(
                                        IdentifierName("S")),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter(
                                        Identifier("f"))
                                    .WithType(
                                        GenericName(
                                            Identifier("Func"))
                                        .WithTypeArgumentList(
                                            TypeArgumentList(
                                                SeparatedList<TypeSyntax>(
                                                    new SyntaxNodeOrToken[]{
                                                        IdentifierName(genA),
                                                        Token(SyntaxKind.CommaToken),
                                                        PredefinedType(
                                                            Token(SyntaxKind.BoolKeyword))}))))})))
                    .WithBody(
                        Block(
                            LocalDeclarationStatement(
                                VariableDeclaration(
                                    IdentifierName("var"))
                                .WithVariables(
                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        VariableDeclarator(
                                            Identifier("self"))
                                        .WithInitializer(
                                            EqualsValueClause(
                                                ThisExpression()))))),
                            ReturnStatement(
                                SimpleLambdaExpression(
                                    Parameter(
                                        Identifier("env")),
                                    InvocationExpression(
                                        MemberAccessExpression(
                                            SyntaxKind.SimpleMemberAccessExpression,
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            MemberAccessExpression(
                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                IdentifierName("self"),
                                                                IdentifierName("__comp")),
                                                            IdentifierName("ForAll")))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SingletonSeparatedList<ArgumentSyntax>(
                                                                Argument(
                                                                    IdentifierName("f"))))),
                                                    IdentifierName("Run")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("env"))))),
                                            IdentifierName("IfNoneOrFail")))
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    LiteralExpression(
                                                        SyntaxKind.FalseLiteralExpression))))))))),
                    MethodDeclaration(
                        GenericName(
                            Identifier("Func"))
                        .WithTypeArgumentList(
                            TypeArgumentList(
                                SeparatedList<TypeSyntax>(
                                    new SyntaxNodeOrToken[]{
                                        IdentifierName(envType),
                                        Token(SyntaxKind.CommaToken),
                                        PredefinedType(
                                            Token(SyntaxKind.BoolKeyword))}))),
                        Identifier("Exists"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithTypeParameterList(
                        TypeParameterList(
                            SingletonSeparatedList<TypeParameterSyntax>(
                                TypeParameter(
                                    Identifier("S")))))
                    .WithParameterList(
                        ParameterList(
                            SeparatedList<ParameterSyntax>(
                                new SyntaxNodeOrToken[]{
                                    Parameter(
                                        Identifier("state"))
                                    .WithType(
                                        IdentifierName("S")),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter(
                                        Identifier("f"))
                                    .WithType(
                                        GenericName(
                                            Identifier("Func"))
                                        .WithTypeArgumentList(
                                            TypeArgumentList(
                                                SeparatedList<TypeSyntax>(
                                                    new SyntaxNodeOrToken[]{
                                                        IdentifierName(genA),
                                                        Token(SyntaxKind.CommaToken),
                                                        PredefinedType(
                                                            Token(SyntaxKind.BoolKeyword))}))))})))
                    .WithBody(
                        Block(
                            LocalDeclarationStatement(
                                VariableDeclaration(
                                    IdentifierName("var"))
                                .WithVariables(
                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        VariableDeclarator(
                                            Identifier("self"))
                                        .WithInitializer(
                                            EqualsValueClause(
                                                ThisExpression()))))),
                            ReturnStatement(
                                SimpleLambdaExpression(
                                    Parameter(
                                        Identifier("env")),
                                    InvocationExpression(
                                        MemberAccessExpression(
                                            SyntaxKind.SimpleMemberAccessExpression,
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            MemberAccessExpression(
                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                IdentifierName("self"),
                                                                IdentifierName("__comp")),
                                                            IdentifierName("Exists")))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SingletonSeparatedList<ArgumentSyntax>(
                                                                Argument(
                                                                    IdentifierName("f"))))),
                                                    IdentifierName("Run")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("env"))))),
                                            IdentifierName("IfNoneOrFail")))
                                    .WithArgumentList(
                                        ArgumentList(
                                            SingletonSeparatedList<ArgumentSyntax>(
                                                Argument(
                                                    LiteralExpression(
                                                        SyntaxKind.FalseLiteralExpression)))))))))
                }));


                var prelude = ClassDeclaration(structName)
                        .WithModifiers(
                            TokenList(
                                new[]{
                                    Token(SyntaxKind.PublicKeyword),
                                    Token(SyntaxKind.StaticKeyword),
                                    Token(SyntaxKind.PartialKeyword)}))
                        .WithMembers(
                            List<MemberDeclarationSyntax>(
                                new MemberDeclarationSyntax[]{
                                    MethodDeclaration(
                                        structA,
                                        Identifier("Return"))
                                    .WithModifiers(
                                        TokenList(
                                            new []{
                                                Token(SyntaxKind.PublicKeyword),
                                                Token(SyntaxKind.StaticKeyword)}))
                                    .WithTypeParameterList(applyToStruct.TypeParameterList)
                                    .WithParameterList(
                                        ParameterList(
                                            SingletonSeparatedList<ParameterSyntax>(
                                                Parameter(
                                                    Identifier("value"))
                                                .WithType(
                                                    IdentifierName(genA)))))
                                    .WithExpressionBody(
                                        ArrowExpressionClause(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    structA,
                                                    IdentifierName("Return")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("value")))))))
                                    .WithSemicolonToken(
                                        Token(SyntaxKind.SemicolonToken)),
                                    MethodDeclaration(
                                        structA,
                                        Identifier("Fail"))
                                    .WithModifiers(
                                        TokenList(
                                            new []{
                                                Token(SyntaxKind.PublicKeyword),
                                                Token(SyntaxKind.StaticKeyword)}))
                                    .WithTypeParameterList(applyToStruct.TypeParameterList)
                                    .WithExpressionBody(
                                        ArrowExpressionClause(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                structA,
                                                IdentifierName("Fail"))))
                                    .WithSemicolonToken(
                                        Token(SyntaxKind.SemicolonToken)),
                                    MethodDeclaration(
                                        structA,
                                        Identifier("asks"))
                                    .WithModifiers(
                                        TokenList(
                                            new []{
                                                Token(SyntaxKind.PublicKeyword),
                                                Token(SyntaxKind.StaticKeyword)}))
                                    .WithTypeParameterList(applyToStruct.TypeParameterList)
                                    .WithParameterList(
                                        ParameterList(
                                            SingletonSeparatedList<ParameterSyntax>(
                                                Parameter(
                                                    Identifier("f"))
                                                .WithType(
                                                    GenericName(
                                                        Identifier("Func"))
                                                    .WithTypeArgumentList(
                                                        TypeArgumentList(
                                                            SeparatedList<TypeSyntax>(
                                                                new SyntaxNodeOrToken[]{
                                                                    IdentifierName(envType),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    IdentifierName(genA)})))))))
                                    .WithExpressionBody(
                                        ArrowExpressionClause(
                                            ObjectCreationExpression(structA)
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            SimpleLambdaExpression(
                                                                Parameter(
                                                                    Identifier("env")),
                                                                TupleExpression(
                                                                    SeparatedList<ArgumentSyntax>(
                                                                        new SyntaxNodeOrToken[]{
                                                                            Argument(
                                                                                InvocationExpression(
                                                                                    IdentifierName("f"))
                                                                                .WithArgumentList(
                                                                                    ArgumentList(
                                                                                        SingletonSeparatedList<ArgumentSyntax>(
                                                                                            Argument(
                                                                                                IdentifierName("env")))))),
                                                                            Token(SyntaxKind.CommaToken),
                                                                            Argument(
                                                                                LiteralExpression(
                                                                                    SyntaxKind.FalseLiteralExpression))})))))))))
                                    .WithSemicolonToken(
                                        Token(SyntaxKind.SemicolonToken))

                                }));


                prelude = applyToStruct.TypeParameterList.Parameters.Count == 1
                    ? prelude.AddMembers(FieldDeclaration(
                                        VariableDeclaration(structEnv)
                                        .WithVariables(
                                            SingletonSeparatedList<VariableDeclaratorSyntax>(
                                                VariableDeclarator(
                                                    Identifier("ask"))
                                                .WithInitializer(
                                                    EqualsValueClause(
                                                        ObjectCreationExpression(structEnv)
                                                        .WithArgumentList(
                                                            ArgumentList(
                                                                SingletonSeparatedList<ArgumentSyntax>(
                                                                    Argument(
                                                                        SimpleLambdaExpression(
                                                                            Parameter(
                                                                                Identifier("env")),
                                                                            TupleExpression(
                                                                                SeparatedList<ArgumentSyntax>(
                                                                                    new SyntaxNodeOrToken[]{
                                                                                        Argument(
                                                                                            IdentifierName("env")),
                                                                                        Token(SyntaxKind.CommaToken),
                                                                                        Argument(
                                                                                            LiteralExpression(
                                                                                                SyntaxKind.FalseLiteralExpression))}))))))))))))
                                    .WithModifiers(
                                        TokenList(
                                            new[]{
                                                Token(SyntaxKind.PublicKeyword),
                                                Token(SyntaxKind.StaticKeyword),
                                                Token(SyntaxKind.ReadOnlyKeyword)})))
                    : prelude.AddMembers(MethodDeclaration(
                            GenericName(
                                Identifier("Subsys"))
                            .WithTypeArgumentList(
                                TypeArgumentList(
                                    SeparatedList<TypeSyntax>(
                                        new SyntaxNodeOrToken[]{
                                            IdentifierName("X"),
                                            Token(SyntaxKind.CommaToken),
                                            IdentifierName("Y"),
                                            Token(SyntaxKind.CommaToken),
                                            QualifiedName(
                                                IdentifierName("TestBed"),
                                                IdentifierName("IO"))}))),
                            Identifier("ask2"))
                        .WithModifiers(
                            TokenList(
                                new[]{
                                    Token(SyntaxKind.PublicKeyword),
                                    Token(SyntaxKind.StaticKeyword)}))
                        .WithTypeParameterList(
                            TypeParameterList(
                                SeparatedList<TypeParameterSyntax>(
                                    new SyntaxNodeOrToken[]{
                                        TypeParameter(
                                            Identifier("X")),
                                        Token(SyntaxKind.CommaToken),
                                        TypeParameter(
                                            Identifier("Y"))})))
                        .WithExpressionBody(
                            ArrowExpressionClause(
                                ObjectCreationExpression(
                                    GenericName(
                                        Identifier("Subsys"))
                                    .WithTypeArgumentList(
                                        TypeArgumentList(
                                            SeparatedList<TypeSyntax>(
                                                new SyntaxNodeOrToken[]{
                                                    IdentifierName("X"),
                                                    Token(SyntaxKind.CommaToken),
                                                    IdentifierName("Y"),
                                                    Token(SyntaxKind.CommaToken),
                                                    QualifiedName(
                                                        IdentifierName("TestBed"),
                                                        IdentifierName("IO"))}))))
                                .WithArgumentList(
                                    ArgumentList(
                                        SingletonSeparatedList<ArgumentSyntax>(
                                            Argument(
                                                SimpleLambdaExpression(
                                                    Parameter(
                                                        Identifier("env")),
                                                    TupleExpression(
                                                        SeparatedList<ArgumentSyntax>(
                                                            new SyntaxNodeOrToken[]{
                                                                Argument(
                                                                    IdentifierName("env")),
                                                                Token(SyntaxKind.CommaToken),
                                                                Argument(
                                                                    LiteralExpression(
                                                                        SyntaxKind.FalseLiteralExpression))})))))))))
                        .WithSemicolonToken(
                            Token(SyntaxKind.SemicolonToken)));



                return Task.FromResult<SyntaxList<MemberDeclarationSyntax>>(results.Add(partialStruct).Add(prelude));
            }
            else
            {
                return Task.FromResult<SyntaxList<MemberDeclarationSyntax>>(results);
            }
        }
    }
}
